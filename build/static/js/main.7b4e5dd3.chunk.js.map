{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","isConnectedWeb3","setIsConnectedWeb3","nameBlockchain","setNameBlockchain","idAccount","setIdAccount","idAccountOverflow","setIdAccountOverflow","linkAccount","setLinkAccount","balanceValue","setBalanceValue","value","setValue","txHash","setTxHash","isMined","setIsMined","addressSend","sendAddress","toastSuccess","toast","success","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","progress","undefined","toastError","message","error","useEffect","connectToWeb3AtStartup","useCallback","a","window","ethereum","web3","Web3","givenProvider","eth","getAccounts","length","getInfoAccount","console","log","alert","accounts","addresstext","toLowerCase","addressStar","substring","addressEnd","getChainId","then","idChain","getBalance","parseFloat","utils","fromWei","toFixed","connectToWeb3","request","method","sendWei","isNaN","contractAddress","accountAddress","isAddress","ETHamount","toWei","sendTransaction","to","from","once","transactionHash","on","confNumber","receipt","className","id","href","rel","target","onClick","type","onChange","e","placeholder","size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b4e5dd3.chunk.js","sourcesContent":["// loader from : https://github.com/n1c01a5/web3-labo\n// Web from : https://www.figma.com/file/CCPlNOj9I081vUai2T2c2v/Wallet_DogeSchool?node-id=0%3A1\nimport { useCallback, useState, useEffect } from 'react'\nimport './App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Web3 from 'web3'\n\nfunction App() {\n  const [isConnectedWeb3, setIsConnectedWeb3] = useState(false)\n  //const [idBlockchain, setIdBlockchain] = useState(0)\n  const [nameBlockchain, setNameBlockchain] = useState(\"Unknow network\")\n  const [idAccount, setIdAccount] = useState(\"\")\n  const [idAccountOverflow, setIdAccountOverflow] = useState(\"\")\n  const [linkAccount, setLinkAccount] = useState(\"\")\n  const [balanceValue, setBalanceValue] = useState(0)\n  const [value, setValue] = useState(0)\n  const [txHash, setTxHash] = useState(\"\")\n  const [isMined, setIsMined] = useState(false)\n  const [addressSend, sendAddress] = useState(\"\")\n\n  useEffect(() => {\n    connectToWeb3AtStartup()\n  });\n\n  function toastSuccess() {\n    toast.success('Success', {\n      position: \"top-center\",\n      autoClose: 3000,\n      hideProgressBar: false,\n      newestOnTop: false,\n      closeOnClick: true,\n      pauseOnHover: false,\n      pauseOnFocusLoss: false,\n      draggable: true,\n      progress: undefined,\n      });\n  }\n\n  function toastError(message) {\n    toast.error(message, {\n      position: \"top-center\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      newestOnTop: false,\n      closeOnClick: true,\n      pauseOnHover: false,\n      pauseOnFocusLoss: false,\n      draggable: true,\n      progress: undefined,\n      });\n  }\n\n  const connectToWeb3AtStartup = useCallback(\n    async () => {\n      if(window.ethereum) {\n        try {\n          const web3 = new Web3(Web3.givenProvider)\n\n          const accounts = await web3.eth.getAccounts()\n          if (accounts.length !== 0) {\n            getInfoAccount()\n            setIsConnectedWeb3(true)\n          }\n\n        } catch (err) {\n          console.log(err)\n        }\n      } else {\n        alert(\"Install Metamask\")\n      }\n    },\n  )\n\n  const getInfoAccount = useCallback(\n  async () => {\n    try {\n      const web3 = new Web3(Web3.givenProvider)\n      const accounts = await web3.eth.getAccounts()\n      setIdAccount(accounts[0])\n      let addresstext = idAccount.toLowerCase();\n      let addressStar = addresstext.substring(0, 5)\n      let addressEnd = addresstext.substring(addresstext.length - 4, addresstext.length - 1)\n      setIdAccountOverflow(addressStar + \"...\" + addressEnd)\n\n      let idChain = await web3.eth.getChainId().then(value => { return value})\n\n      switch(idChain) {\n        case 1:\n          setNameBlockchain(\"Ethereum\")\n          setLinkAccount(\"https://etherscan.io/address/\" + accounts[0])\n          break\n        case 3:\n          setNameBlockchain(\"Ropsten\")\n          setLinkAccount(\"https://Ropsten.etherscan.io/address/\" + accounts[0])\n          break\n        case 4:\n          setNameBlockchain(\"Rinkeby\")\n          setLinkAccount(\"https://Rinkeby.etherscan.io/address/\" + accounts[0])\n          break\n        case 5:\n          setNameBlockchain(\"Goerli\")\n          setLinkAccount(\"https://Goerli.etherscan.io/address/\" + accounts[0])\n          break\n        case 42:\n            setNameBlockchain(\"Kovan\")\n            setLinkAccount(\"https://kovan.etherscan.io/address/\" + accounts[0])\n            break\n        case 97:\n            setNameBlockchain(\"Binance testnet\")\n            break\n        default:\n          setNameBlockchain(\"Unknow network (id Blockchain: \" + idChain + \")\")\n          setLinkAccount(\"\")\n      }\n\n      const value = await web3.eth.getBalance(accounts[0])\n      setBalanceValue(parseFloat(web3.utils.fromWei(value, \"ether\")).toFixed(2))\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n  )\n\n  const connectToWeb3 = useCallback(\n    async () => {\n      if(window.ethereum) {\n        try {\n          //const web3 = new Web3(Web3.givenProvider)\n\n          const accounts = await window.ethereum.request({method: 'eth_requestAccounts'})\n          if (accounts.length !== 0) {\n            getInfoAccount()\n            setIsConnectedWeb3(true)\n            toastSuccess()\n          }\n\n        } catch (err) {\n          console.log(err)\n        }\n      } else {\n        alert(\"Install Metamask\")\n      }\n    },\n  )\n\n  const sendWei = useCallback(\n    async () => {\n      //isConnectedWeb3\n      if (addressSend.length === 0) {\n        toastError(\"address cannot be empty !\")\n        return\n      }\n\n      //console.log(value)\n      if (isNaN(value)) {\n        toastError(\"amount can only be number !\")\n        return\n      }\n\n      if (!value) {\n        toastError(\"amount cannot be empty !\")\n        return\n      }\n\n      if (parseFloat(value) === 0) {\n        toastError(\"amount cannot be 0 !\")\n        return\n      }\n\n      const web3 = new Web3(Web3.givenProvider)\n\n      const accounts = await web3.eth.getAccounts()\n\n      let contractAddress = addressSend.toLowerCase();\n      let accountAddress = accounts[0].toLowerCase();\n      // account and address is the same\n      if (contractAddress === accountAddress) {\n        toastError(\"address send and receive are the same !\")\n        return\n      }\n\n      const check = web3.utils.isAddress(contractAddress)\n      if (!check) {\n        toastError(\"invalid address\")\n        return\n      }\n      let ETHamount = web3.utils.toWei(value, 'ether')\n\n      web3.eth.sendTransaction({to: contractAddress, from: accountAddress, value: ETHamount})\n      .once('transactionHash', (transactionHash) => setTxHash(transactionHash))\n      .on('confirmation', (confNumber, receipt) => {\n        setIsMined(true)\n        toastSuccess()\n      })  \n    }, [value, addressSend]\n  )\n\n  return (\n    <div className=\"App\">\n      <main className=\"main\">\n              <ToastContainer />\n        <div id=\"connect\">\n          <div className=\"flex-item\">\n            <h2>Wallet dApp</h2>\n          </div>\n          <div className=\"cnx-item\">\n            {\n              isConnectedWeb3 ? <label id=\"labelBC\">{nameBlockchain}</label> : <label>Not connected</label>\n            }\n          </div>\n          <div className=\"raw-item\">\n            {\n              isConnectedWeb3 ? <label id=\"labelAdr\"><a href={linkAccount} rel=\"noreferrer\" target=\"_blank\">{idAccountOverflow}</a></label> : <button onClick={connectToWeb3} id=\"web3Btn\">Connect web3</button>\n            }\n          </div>\n        </div>\n\n        <div>\n        {\n          isConnectedWeb3 ? <div><p>Amount Ethers: {balanceValue}</p></div> : <div><p>Amount Ethers:</p></div>\n        }\n        </div>\n        <div><p>Address: \n          <input type=\"text\" id=\"inputAddress\" onChange={e => sendAddress(e.target.value)} placeholder=\"address wallet to reveive fund 0x...\" size=\"50\" /></p>\n          <p>Amount:\n          <input type=\"text\" onChange={e => setValue(e.target.value)} placeholder=\"amount ether ex: 10 or 0.001\" size=\"30\" /></p>\n          <p><button onClick={sendWei} className=\"sendBtn\">Envoyer</button></p><p></p></div>\n\n        {\n          (txHash && !isMined) \n            && \n            <div>\n              <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n              <a href={`https://kovan.etherscan.io/tx/${txHash}`} rel=\"noreferrer\" target=\"_blank\">\n                Loader ...\n              </a>\n            </div>\n        }\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}